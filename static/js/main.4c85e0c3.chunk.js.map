{"version":3,"sources":["models/Node.ts","helpers/consts.ts","helpers/animations.ts","helpers/gridHelper.ts","models/Grid.ts","structures/heap.ts","algorithms/a.ts","styles/NavStyles.ts","components/WeightedButton.tsx","algorithms/bellmanFord.ts","components/NegButton.tsx","structures/queue.ts","algorithms/bfs.ts","structures/stack.ts","algorithms/dfs.ts","components/Nav.tsx","components/navHelper.tsx","styles/NodeStyles.ts","components/Node.tsx","components/Grid.tsx","hooks/useToggleState.ts","hooks/useWindowDim.ts","App.tsx","serviceWorker.js","index.js"],"names":["Node","col","row","val","start","target","adjList","weight","_isStart","_isTarget","_isWall","this","KEYS","colors","sleep","m","Promise","r","setTimeout","pathAnimation","path","a","i","length","changingPropAnimation","visitedAnimation","startVal","targetVal","color","clearAnimation","g","grid","j","v","document","getElementById","style","backgroundColor","wallAnimation","node","isStart","isTarget","startNodeAnimation","finishNodeAnimation","clearNodeAnimation","clearPathAnimation","isWall","getRandomNode","nRows","nCols","Math","floor","random","valToIndx","getVal","createAdjList","b","c","d","toggleIsWall","getNewMazedGrid","eps","newGrid","slice","newNode","getPath","parents","get","push","reverse","Grid","max","min","currentRow","AdjList","key","Heap","values","idxs","size","contains","undefined","isEmpty","lessThan","k","myParentIdx","myChildrenIdx","swapIdxs","temp","set","bubbleUp","bubbleDown","idx","l","smallIdx","enqueue","parentIdx","decreaseKey","newVal","dequeue","pop","delete","lChild","rChild","Map","alpha","test","targetRow","targetCol","targetNode","heap","SCALING_FACTOR","distances","Array","fill","Infinity","inspectedNodes","nDeq","s","smallestVal","smallest","neighbour","nextNode","newF","f","oldF","console","log","getPathDistance","distance","sf","abs","manhattan","startRow","startCol","styles","makeStyles","theme","Navbar","height","marginBottom","breakpoints","down","title","up","marginRight","paddingRight","borderRight","padding","btnOpt","button","margin","fontSize","textTransform","slider","width","outline","border","boxShadow","marginLeft","marginTop","drawerIconContainer","text","listItemText","textAlign","WeightedButton","props","useState","setAlpha","fName","setFName","disable","btn","handleClick","setOpenDrawer","classes","MySlider","defaultValue","onAfterChange","onChange","step","disabled","className","WButton","Button","onClick","WListItem","List","disablePadding","ListItem","divider","ListItemText","bellmanFord","stop","alert","cycle","NegButton","clear","newMaze","setIsWeighted","openAlert","setOpenAlert","handleClickOpenAlert","handleCloseAlert","bfDialog","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","negBtn","Typography","negBtnList","next","Queue","first","last","removed","bfs","visited","dist","q","enQueue","deQueue","w","wNode","Stack","dfs","result","stack","Nav","setGrid","setDisable","isWeighted","toggleIsweighted","isNegative","toggleIsNegative","handleChangeStart","handleChangeTarget","useTheme","matchesSM","useMediaQuery","openDrawer","n","alg","btnOptList","params","negativeWeight","name","click","createBtnOptList","unWBtnsList","createUnWBtnsList","btnOpts","map","unWBtns","btns","window","drawer","SwipeableDrawer","onOpen","IconButton","disableRipple","AppBar","position","Toolbar","variant","display","onMouseDown","onMouseEnter","onMouseUp","handleMouseDown","handleMouseEnter","handleMouseUp","rowIdx","useToggleState","initialVal","state","setState","toggle","getWindowDimensions","innerWidth","innerHeight","App","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","getNRowsandNCols","mouseIsPressed","setMouseIsPressed","createWall","setCreatWall","toggleCreateWall","changeStart","setChangeStart","toggleChangeStart","changeTarget","setChangeTarget","toggleChangeTarget","GridModel","initialGrid","onKeyDown","event","tabIndex","newStart","changeStartNode","newTarget","changeTargetNode","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4c85e0c3.chunk.js","sourcesContent":["import AdjList from \"./AdjList\";\n\nexport default class Node {\n  public readonly col: number;\n  public readonly row: number;\n  // converting row x col to a single vector\n  // unique id\n  public readonly val: number;\n  public readonly weight: number;\n  private _isStart: boolean;\n  private _isTarget: boolean;\n  private _isWall: boolean;\n  public readonly adjList: AdjList;\n\n  constructor(\n    col: number,\n    row: number,\n    val: number,\n    start: number,\n    target: number,\n    adjList: AdjList,\n    weight = 1\n  ) {\n    this.col = col;\n    this.row = row;\n    this.val = val;\n    this.weight = weight;\n    this._isStart = this.val === start;\n    this._isTarget = this.val === target;\n    this._isWall = false;\n    this.adjList = adjList;\n  }\n\n  get isStart() {\n    return this._isStart;\n  }\n\n  set isStart(val: boolean) {\n    this._isStart = val;\n  }\n\n  get isTarget() {\n    return this._isTarget;\n  }\n\n  set isTarget(val: boolean) {\n    this._isTarget = val;\n  }\n\n  get isWall() {\n    return this._isWall;\n  }\n\n  set isWall(val: boolean) {\n    this._isWall = val;\n  }\n}\n","export const MIN = -5;\nexport const MAX = 201;\n\n// chance to a free node to became a wall when a Wall is created\nexport const WALL_EPS = 0.33;\n\nexport const KEYS = {\n  start: \"s\",\n  target: \"t\",\n  wall: \"w\",\n};\n\nexport const colors = {\n  black: \"#000\",\n  blue: \"#2f91d3\",\n  green: \"#2ac46a\",\n  light_blue: \"rgb(175, 216, 248)\",\n  light_gray: \"#c5c9ca\",\n  red: \"#de4536\",\n  white: \"#fff\",\n  yellow: \"#ffed58\",\n};\n","import { colors } from \"./consts\";\nimport Grid from \"../models/Grid\";\nimport Node from \"../models/Node\";\n\n// set a timeout so we can see all animations\nexport const sleep = (m: number) => new Promise((r) => setTimeout(r, m));\n\n// path is an array with all node, with val representation, from start to target.\n// paint all node that belong to this path in yellow\nexport const pathAnimation = async (path: number[]) => {\n  for (let i = 0; i < path.length; i++) {\n    await sleep(12);\n    changingPropAnimation(path[i], colors.yellow);\n  }\n};\n\n// change the color of a node (val) to a new color when it is visited\n// A node is visited when its distance from start it is the smallest among all still available nodes (nonegative weight)\n// or when its distance from start node decrease (for negative weights)\nexport const visitedAnimation = async (\n  val: number,\n  startVal: number,\n  targetVal: number,\n  color = colors.blue\n) => {\n  if (val === targetVal || val === startVal) return;\n  await sleep(0.1);\n  changingPropAnimation(val, color);\n};\n\n// change all nodes to free nodes, remove path and visited node animations\n// Only start and target nodes keep the same\nexport const clearAnimation = (\n  g: Grid,\n  startVal: number,\n  targetVal: number\n) => {\n  const { grid } = g;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const v = grid[i][j];\n      if (v.val !== startVal && v.val !== targetVal)\n        changingPropAnimation(v.val, colors.white);\n    }\n  }\n};\n\n// changes the color of a node (val)\nconst changingPropAnimation = (val: number, color: string) => {\n  const vertex = document.getElementById(`node-${val}`)!.style;\n  vertex.backgroundColor = `${color}`;\n};\n\n// chnages the color of a new wall\nexport const wallAnimation = async (node: Node) => {\n  // start and target node cant be walls\n  if (node.isStart || node.isTarget) return;\n  await sleep(1);\n  changingPropAnimation(node.val, colors.black);\n};\n\n// changes the color of the start node (val)\nexport const startNodeAnimation = (startVal: number) => {\n  changingPropAnimation(startVal, colors.green);\n};\n\n// changes the color of the target node (val)\nexport const finishNodeAnimation = (targetVal: number) => {\n  changingPropAnimation(targetVal, colors.red);\n};\n\n// changes the color from a node node to white (free node)\nexport const clearNodeAnimation = (val: number) => {\n  changingPropAnimation(val, colors.white);\n};\n\n// changes all visited nodes and path to free nodes (color white)\nexport const clearPathAnimation = (g: Grid) => {\n  const { grid } = g;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const v = grid[i][j];\n      if (!v.isStart && !v.isTarget && !v.isWall) {\n        clearNodeAnimation(v.val);\n      }\n    }\n  }\n};\n","import AdjList from \"../models/AdjList\";\nimport Grid from \"../models/Grid\";\nimport Node from \"../models/Node\";\n\nimport { wallAnimation } from \"./animations\";\n\n// returns a random Node by val\nexport const getRandomNode = (nRows: number, nCols: number) => {\n  return Math.floor(Math.random() * nRows * nCols);\n};\n\n// returns {row, col} of a node val\nexport const valToIndx = (val: number, nCols: number) => {\n  const row = Math.floor(val / nCols);\n  const col = val - row * nCols;\n  return [row, col];\n};\n\n// convert row x col to val\nexport const getVal = (row: number, nCols: number, col: number) => {\n  return row * nCols + col;\n};\n\nexport const manhattan = (a: number, b: number, c: number, d: number) => {\n  return Math.abs(a - b) + Math.abs(c - d);\n};\n\n//         A\n//    B   VAL  D\n//         C\n// returns all neighbours of VAL\nexport const createAdjList = (\n  val: number,\n  col: number,\n  row: number,\n  nRows: number,\n  nCols: number\n): AdjList => {\n  //   neighbours in a line above\n  // negative numbers arent a node\n  const a = row !== 0 ? val - nCols : null;\n  // neighbours in the same line\n  // check left border\n  const b = col !== 0 ? val - 1 : null;\n  // check right border\n  const d = col !== nCols - 1 ? val + 1 : null;\n  //  neighbours in a line bellow\n  // check overflow\n  const c = row !== nRows - 1 ? val + nCols : null;\n\n  return { a, b, c, d };\n};\n\nexport const getNRowsandNCols = (\n  matchesSM: boolean,\n  height: number,\n  width: number\n) => {\n  // 87% or 80%(SM display) of total height: discount nav height\n  const nRows = matchesSM\n    ? Math.floor((height * 0.8) / 27)\n    : Math.floor((height * 0.87) / 27);\n  const nCols = Math.floor(width / 27);\n  return [nRows, nCols];\n};\n\n// changes node inside of grid.grid withou setState, PAY ATTENTION\nexport const toggleIsWall = (node: Node) => {\n  node.isWall = !node.isWall;\n};\n\n// changes 2 nodes from grid.hrid withou using setState, not a pure function\n// PAY ATTETION\nexport const changeStartNode = (grid: Grid, newStart: Node) => {\n  // change node properties\n  const [r, c] = valToIndx(grid.start, grid.nCols);\n  const oldStart = grid.grid[r][c];\n  oldStart.isStart = false;\n  newStart.isStart = true;\n};\n\n// changes 2 nodes from grid.hrid withou using setState, not a pure function\n// PAY ATTETION\nexport const changeTargetNode = (grid: Grid, newTarget: Node) => {\n  // change node properties\n  const [r, c] = valToIndx(grid.target, grid.nCols);\n  const oldTarget = grid.grid[r][c];\n  oldTarget.isTarget = false;\n  newTarget.isTarget = true;\n};\n\n// returns a new mazed grid\n// a node has eps prob to become a wall,\n//  start and target node can not be a wall\n// IMPURE Function, changes grid param\n// should I make a newGrid: Grid obejct? using overload constructor\n// for while just make work\nexport const getNewMazedGrid = async (grid: Grid, eps: number) => {\n  // const newGrid = new Grid()\n  const newGrid = grid.grid.slice();\n  for (let row = 0; row < grid.grid.length; row++) {\n    for (let col = 0; col < grid.grid[row].length; col++) {\n      // start and target node can not be a wall\n      if (grid.grid[row][col].isStart || grid.grid[row][col].isTarget) {\n        break;\n      }\n      if (Math.random() <= eps) {\n        const node = newGrid[row][col];\n        const newNode = node;\n        newNode.isWall = true;\n        newGrid[row][col] = newNode;\n        await wallAnimation(newGrid[row][col]);\n      }\n    }\n  }\n  grid.grid = newGrid;\n  return grid;\n};\n\n//   building path\nexport const getPath = (\n  // array of nodes by val representation\n  // parents: number[],\n  parents: Map<number, number | null>,\n  // start node val representation\n  startVal: number,\n  // target node val representation\n  targetVal: number\n) => {\n  let a = parents.get(targetVal)!;\n  let path = [];\n  while (a !== startVal) {\n    path.push(a);\n    a = parents.get(a)!;\n  }\n  return path.reverse();\n};\n","import Node from \"./Node\";\nimport { createAdjList, getVal } from \"../helpers/gridHelper\";\n\nexport default class Grid {\n  public grid: Node[][];\n  public start: number;\n  public target: number;\n  public readonly nRows: number;\n  public readonly nCols: number;\n  // min and max weight allowed\n  public readonly min: number;\n  public readonly max: number;\n  constructor(\n    start: number,\n    target: number,\n    nRows: number,\n    nCols: number,\n    // min and max weight\n    max = 1,\n    min = 1\n  ) {\n    this.grid = [];\n    this.start = start;\n    this.target = target;\n    this.nCols = nCols;\n    this.nRows = nRows;\n    this.min = min;\n    this.max = max;\n    for (let row = 0; row < nRows; row++) {\n      const currentRow: Node[] = [];\n      for (let col = 0; col < nCols; col++) {\n        // get random weight for all edges of this node\n        const weight = Math.floor(Math.random() * (max - min) + min);\n        const val = getVal(row, nCols, col);\n        const AdjList = createAdjList(val, col, row, nRows, nCols);\n        const newNode = new Node(col, row, val, start, target, AdjList, weight);\n        currentRow.push(newNode);\n      }\n      this.grid.push(currentRow);\n    }\n  }\n}\n","class Node<T> {\n  public key: T;\n  public val: number;\n  constructor(key: T, val: number) {\n    this.key = key;\n    this.val = val;\n  }\n}\n\nclass Heap<T> {\n  public values: Node<T>[];\n  // maps Node key (T) to index of node array (Heap)\n  public idxs: Map<T, number>;\n  public size: number;\n  constructor() {\n    this.values = [];\n    // dict: key to array idx => you say the key it returns the idx\n    this.idxs = new Map();\n    this.size = 0;\n  }\n\n  // Returns true if this heap constains this key\n  // Otherwise returns false\n  contains = (key: T) => {\n    if (this.idxs.get(key) === undefined) return false;\n    return true;\n  };\n\n  // Returns true if this heap is empty\n  // Otherwise returns false\n  isEmpty = () => {\n    return this.size === 0;\n  };\n\n  // Returns true if the element from index i is smaller than k idx element\n  // otherwise returns false\n  lessThan = (i: number, k: number) => {\n    // out of bounds\n    if (i < 0 || k < 0) return false;\n    if (i > this.size - 1 || k > this.size - 1) return false;\n    if (this.values[i].val < this.values[k].val) return true;\n    return false;\n  };\n\n  // Returns the parent's index of the ith node\n  myParentIdx = (i: number) => {\n    return Math.floor((i - 1) / 2);\n  };\n\n  // Returns the children's index of the ith node\n  myChildrenIdx = (i: number) => {\n    // left 2 * i + 1 , right 2 * idx + 2\n    return [2 * i + 1, 2 * i + 2];\n  };\n\n  // swap idxs elements in map key to idx\n  swapIdxs = (a: T, b: T) => {\n    const temp = this.idxs.get(a)!;\n    this.idxs.set(a, this.idxs.get(b)!);\n    this.idxs.set(b, temp);\n  };\n\n  // Rearrange values and map\n  bubbleUp = (i: number, j: number) => {\n    //swap i and j\n    [this.values[i], this.values[j]] = [this.values[j], this.values[i]];\n\n    // swap idxs elements in map key to idx\n    const a = this.values[i].key;\n    const b = this.values[j].key;\n    this.swapIdxs(a, b);\n  };\n\n  // Returns the smmaller child idx\n  // Rearrange values and map\n  bubbleDown = (idx: number, l: number, r: number) => {\n    // to keep track of the smallest child\n    let smallIdx;\n    if (this.lessThan(l, r)) {\n      smallIdx = l;\n    } else if (this.lessThan(r, l)) {\n      smallIdx = r;\n      // if they have the same val we take the left child as the smallest\n    } else {\n      smallIdx = l;\n    }\n    // swap element from idx with greater\n    [this.values[idx], this.values[smallIdx]] = [\n      this.values[smallIdx],\n      this.values[idx],\n    ];\n\n    // swap idxs elements in map key to idx\n    const a = this.values[idx].key;\n    const b = this.values[smallIdx].key;\n    this.swapIdxs(a, b);\n    return smallIdx;\n  };\n\n  // Inserts a node (key,val) in the last position and rearrange\n  // Returns the node inserted\n  // Returns false whether this key is already in this heap\n  enqueue = (key: T, val: number) => {\n    // to avoid duplicate keys\n    if (this.contains(key)) return false;\n    let node = new Node(key, val);\n    this.values.push(node);\n    this.size++;\n    // last position to insert this new node\n    let idx = this.size - 1;\n    // add the idx of this key on the map\n    this.idxs.set(key, idx);\n    let parentIdx = this.myParentIdx(idx);\n    // bubble-up (while this new node is smaller than its parent)\n    while (this.lessThan(idx, parentIdx)) {\n      this.bubbleUp(idx, parentIdx);\n      //   recalculate node idx, parent idx position\n      idx = parentIdx;\n      parentIdx = this.myParentIdx(idx);\n    }\n    return node;\n  };\n\n  // Update the val of this key\n  // Returns true if works\n  // Returns false if there is not any node with this key in this heap\n  // Returns undefined if newVal is equal to the actual val of key\n  // Returns undefined if newVal is greater than the actual val of key\n  decreaseKey = (key: T, newVal: number) => {\n    // check whether this key belongs to this heap\n    if (!this.contains(key)) return false;\n    let idx = this.idxs.get(key)!;\n    // to ensure newVal < val\n    if (newVal > this.values[idx].val) return;\n    // if they are the same just return\n    if (newVal === this.values[idx].val) return;\n    //   update node with new val\n    this.values[idx].val = newVal;\n    let parentIdx = this.myParentIdx(idx);\n    // bubble-up (while this new node is smaller than its parent)\n    while (this.lessThan(idx, parentIdx)) {\n      this.bubbleUp(idx, parentIdx);\n      //   recalculate node idx, parent idx position\n      idx = parentIdx;\n      parentIdx = this.myParentIdx(idx);\n    }\n    return true;\n  };\n\n  // Removes the root (min),\n  // Returns the root\n  // Returns null if this heap is empty\n  dequeue = () => {\n    if (this.isEmpty()) return null;\n    if (this.size === 1) {\n      this.size--;\n      return this.values.pop()!;\n    }\n    const min = this.values[0];\n    // replace the root with the last element\n    this.values[0] = this.values.pop()!;\n    this.size--;\n    // delete from map\n    this.idxs.delete(min.key);\n    // update idx of the 'new root' in the map\n    this.idxs.set(this.values[0].key, 0);\n    // index of this node we have to rearrange and the idx of its children\n    let idx = 0;\n    let [lChild, rChild] = this.myChildrenIdx(idx);\n    // bubble-down (while any child is smaller than the parent)\n    while (this.lessThan(lChild, idx) || this.lessThan(rChild, idx)) {\n      // update idx and its children\n      idx = this.bubbleDown(idx, lChild, rChild);\n      [lChild, rChild] = this.myChildrenIdx(idx);\n    }\n    return min;\n  };\n}\n\nexport default Heap;\n","import Grid from \"../models/Grid\";\nimport Node from \"../models/Node\";\nimport Heap from \"../structures/heap\";\nimport { valToIndx, manhattan, getPath } from \"../helpers/gridHelper\";\nimport { pathAnimation, visitedAnimation } from \"../helpers/animations\";\n\nconst a = async (g: Grid, alpha: number, test = false) => {\n  const { grid, nCols, max, start, target } = g;\n  const [targetRow, targetCol] = valToIndx(target, nCols);\n  const targetNode = grid[targetRow][targetCol];\n  const heap = new Heap<number>();\n  // expected value of a random (uniformily) weight :\n  //  range:[1,max), rememebr sum of 1st 100 int = (100+1) * 50\n  //  => (100+1)+ (99+2) + (98+3) ... this is (101) 50 times\n  //    sum of all possible values <sum of N first terms of AP> / max value\n  const SCALING_FACTOR = ((max - 1 + 1) * (max / 2)) / max;\n  // Initialize distances(weight cost) with Infinity and parents array with null\n  // Distance between any given node to the start node\n  // maps node val to weight cost\n  const distances = Array(grid.length * nCols).fill(Infinity);\n  const parents = new Map<number, number | null>();\n  let smallestVal;\n  let inspectedNodes = 0;\n  let decrease = false;\n  // number of dequeues\n  let nDeq = 0;\n  distances[start] = 0;\n  // distances[start.val] = 0;\n  //   add the start node to the heap\n  //   we will use f(n) = alpha * distance + ( 1 - alpha) * Manhattan distance\n  // as val to be minimized in the heap\n  //   f for the start node is zero anyway\n  // heap.enqueue(start.val, f(0, start, target, alpha));\n  heap.enqueue(start, 0);\n  inspectedNodes++;\n\n  //   while there are elements in this heap\n  while (heap.values.length) {\n    //   get the min value from the heap\n    let s = heap.dequeue()!;\n    nDeq++;\n    smallestVal = s.key;\n    // check if it is the target node\n    if (smallestVal === target) {\n      break;\n    }\n    // convert smallestVal to a Node\n    const [r, c] = valToIndx(smallestVal, nCols);\n    const smallest = grid[r][c];\n    // for all neighbour of smallest\n    for (let k in smallest.adjList) {\n      // get the val of the neighbour\n      const neighbour = smallest.adjList[k];\n      // check if is not null => grid border\n      if (neighbour) {\n        const [row, col] = valToIndx(neighbour, nCols);\n        // neighbour as a node\n        let nextNode = grid[row][col];\n        // calculate Dijkstra's  Greedy Criterium and manhattan distance\n        let d = distances[smallestVal] + smallest.weight;\n        let newF = f(d, nextNode, targetNode, alpha, SCALING_FACTOR);\n        let oldF = f(\n          distances[nextNode.val],\n          nextNode,\n          targetNode,\n          alpha,\n          SCALING_FACTOR\n        );\n        //   compare f(d,next,target) with f calculated with last distance storaged\n        if (newF < oldF && !nextNode.isWall) {\n          //   updating distances and parents\n          distances[nextNode.val] = d;\n          parents.set(nextNode.val, smallest.val);\n          decrease = heap.decreaseKey(nextNode.val, newF)!;\n          if (!decrease) {\n            // enqueue with new priority\n            heap.enqueue(nextNode.val, newF);\n          }\n          if (!test) await visitedAnimation(nextNode.val, start, target);\n          inspectedNodes++;\n        }\n      }\n    }\n  }\n  if (distances[target] === Infinity) {\n    return { parents, path: null };\n  }\n  const path = getPath(parents, start, target);\n  //   min distance g() found  by A*\n  console.log(`A* with Alpha= ${alpha} Min Distance = ${distances[target]}`);\n  //   distance of this path (yellow)\n  console.log(\n    `A* with Alpha= ${alpha} Distance Calculated = ${getPathDistance(\n      path,\n      g,\n      start\n    )}`\n  );\n  console.log(`A* with Alpha= ${alpha} inspectedNodes = ${inspectedNodes}`);\n  console.log(`A* with Alpha= ${alpha} Dequeues = ${nDeq}`);\n  console.log(`scaling factor: ${SCALING_FACTOR}`);\n  if (!test) await pathAnimation(path);\n  return { parents, path };\n};\n\n//   we will use f(n) = (alpha * distance + ( 1 - alpha) * Manhattan distance) * SCALING FACTOR\n//      we use a scaling factor because we compare nodes' weights with distances\n//      weight: [1, max] ; while Manhattan d. is calculated in '[nodes distance] units': 1 (for adj nodes)\n// as val to be minimized in the heap\nconst f = (distance: number, a: Node, b: Node, alpha: number, sf: number) => {\n  const g = distance;\n  const h = manhattan(a.row, b.row, a.col, b.col) * sf;\n  const w = g === Infinity && alpha === 0 ? Infinity : alpha * g;\n  const z = (1 - alpha) * h;\n  return w + z;\n};\n\nconst getPathDistance = (path: number[], g: Grid, start: number) => {\n  const { grid, nCols } = g;\n  const [startRow, startCol] = valToIndx(start, nCols);\n  // start and finish nodes are not in the path (yelow animation)\n  let d = grid[startRow][startCol].weight;\n  for (let i = 0; i < path.length; i++) {\n    let [r, c] = valToIndx(path[i], nCols);\n    const node = grid[r][c];\n    d += node.weight;\n  }\n  return d;\n};\nexport default a;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst styles = makeStyles((theme) => ({\n  Navbar: {\n    height: \"8vh\",\n    marginBottom: \"10px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      height: \"10vh\",\n    },\n  },\n  title: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: \"1vw\",\n      paddingRight: \"2vw\",\n      borderRight: \"1px solid black\",\n      padding: \"0.5em\",\n    },\n  },\n  btnOpt: {\n    marginRight: \"1vw\",\n    paddingRight: \"1vw\",\n    borderRight: \"1px solid black\",\n    padding: \"0.5em\",\n    [theme.breakpoints.down(\"md\")]: {\n      marginRight: \"0.7vw\",\n      paddingRight: \"1.6vw\",\n      borderRight: \"1px solid black\",\n      padding: \"0.3em\",\n    },\n  },\n  button: {\n    margin: \"0 6px\",\n    fontSize: \"1rem\",\n    textTransform: \"none\",\n    [theme.breakpoints.down(\"md\")]: {\n      margin: \"0 4px\",\n      fontSize: \"0.8rem\",\n      textTransform: \"none\",\n    },\n  },\n  slider: {\n    width: \"12vw\",\n    margin: \"0 10px\",\n    [theme.breakpoints.down(\"md\")]: {\n      width: \"8vw\",\n      margin: \"0 6px\",\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n      margin: 0,\n    },\n    display: \"inline-block\",\n    \"& .rc-slider-track\": {\n      backgroundColor: \"transparent\",\n    },\n    \"& .rc-slider-rail\": {\n      height: \"8px\",\n    },\n    \"& .rc-slider-handle:active, .rc-slider-handle:hover, .rc-slider-handle:focus, .rc-slider-handle\": {\n      backgroundColor: \"black\",\n      outline: \"none\",\n      border: \"2px solid black\",\n      boxShadow: \"none\",\n      width: \"13px\",\n      height: \"13px\",\n      marginLeft: \"-7px\",\n      marginTop: \"-3px\",\n    },\n  },\n  drawerIconContainer: {\n    marginLeft: \"auto\",\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  text: {\n    fontSize: \"1em\",\n    [theme.breakpoints.down(\"md\")]: {\n      fontSize: \"0.8rem\",\n    },\n  },\n  listItemText: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default styles;\n","import React, { useState } from \"react\";\nimport { Button, List, ListItem, ListItemText } from \"@material-ui/core\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nimport a from \"../algorithms/a\";\nimport styles from \"../styles/NavStyles\";\nimport WeightedButtonProps from \"./types/WeightedButtonTypes\";\n\nfunction WeightedButton(props: WeightedButtonProps) {\n  const [alpha, setAlpha] = useState(0.57);\n  const [fName, setFName] = useState(\"A*\");\n  const { grid, disable, btn, handleClick, setOpenDrawer } = props;\n  const classes = styles();\n\n  const changeAlpha = (alpha: number) => setAlpha(alpha);\n\n  const hanldeSliderChange = () => {\n    if (alpha !== 0 && alpha !== 1) setFName(\"A*\");\n    else {\n      if (alpha === 0) setFName(\"Best Fisrt Search\");\n      if (alpha === 1) setFName(\"Dijkstra\");\n    }\n  };\n\n  const MySlider = (\n    <Slider\n      key=\"slider\"\n      defaultValue={alpha}\n      min={0}\n      max={1}\n      onAfterChange={hanldeSliderChange}\n      onChange={changeAlpha}\n      step={0.01}\n      disabled={disable}\n      className={classes.slider}\n    />\n  );\n\n  const WButton = (\n    <div>\n      {MySlider}\n      <span key=\"alpha\" className={classes.text}>\n        Alpha: {alpha}\n      </span>\n      <Button\n        key=\"alg-btn\"\n        className={classes.button}\n        onClick={() => handleClick(a(grid, alpha))}\n        disabled={disable}\n      >\n        {fName}\n      </Button>\n    </div>\n  );\n\n  const WListItem = (\n    <List disablePadding>\n      <ListItem divider key=\"list-item-slider\">\n        {MySlider}\n      </ListItem>\n      <ListItem divider className={classes.button} key=\"list-item-alpha\">\n        <ListItemText className={classes.listItemText}>\n          Alpha: {alpha}\n        </ListItemText>\n      </ListItem>\n      <ListItem\n        onClick={() => {\n          setOpenDrawer(false);\n          handleClick(a(grid, alpha));\n        }}\n        divider\n        button\n        className={classes.button}\n        disabled={disable}\n        key=\"list-item-alg-btn\"\n      >\n        <ListItemText className={classes.listItemText}>{fName}</ListItemText>\n      </ListItem>\n    </List>\n  );\n\n  return btn ? WButton : WListItem;\n}\n\nexport default WeightedButton;\n","import Grid from \"../models/Grid\";\nimport { valToIndx, getPath } from \"../helpers/gridHelper\";\nimport {\n  pathAnimation,\n  visitedAnimation,\n  clearPathAnimation,\n} from \"../helpers/animations\";\nimport { colors } from \"../helpers/consts\";\n\n// Returns the distance from s to each node and their parents O(mn)\n// negative costs are allowed\n// SSSP (Single Source Shortest Problem)\n// detect negative cycles: boolean output (cycle)\n// use parents (predecessor pointers) to traverse the path\n// const bellmanFord = async (grid, start, end, nCols) => {\nconst bellmanFord = async (g: Grid, test = false) => {\n  const { grid, nCols, start, target } = g;\n  // O(m) space => to reconstruct path from s to (any) v\n  // parents  (predecessor pointers)\n  const distances = Array(grid.length * nCols).fill(Infinity);\n  // const parents = Array(grid.length * nCols).fill(null);\n  const parents = new Map<number, number | null>();\n  // to stop earlier\n  let stop = true;\n  // i: number of edges allowed\n  // for i =0, all dist from s to node are infinity\n  // dist s to s\n  distances[start] = 0;\n  // i edges allowed, (n-1) at most => O(n)\n  // try for n edges to check for negative cycles\n  // if costs get smaller indefinitely (OPT(n,v) !== OPT(n-1,v))\n  // There is a negative cycle\n  for (let i = 1; i < grid.length * nCols; i++) {\n    if (!test) clearPathAnimation(g);\n    // if no distance get smaller, we can stop early\n    // if after n-1 steps: the costs still get smaller (with n edges allowed)\n    // negative cycle detected!\n    stop = true;\n    // try a min path for each edge => O(m)\n    for (let val = 0; val < grid.length * nCols; val++) {\n      const [r, c] = valToIndx(val, nCols);\n      const v = grid[r][c];\n      // only try for distances that can be decreased\n      if (distances[val] === Infinity || v.isWall) {\n        continue;\n      }\n      for (let k in v.adjList) {\n        const neighbour = v.adjList[k];\n        // check if is not null => grid border\n        if (neighbour !== null) {\n          const [row, col] = valToIndx(neighbour, nCols);\n          //   neighbour as a node\n          let nextNode = grid[row][col];\n          if (!nextNode.isWall) {\n            let d = distances[val] + nextNode.weight;\n            // node checked\n            if (!test) {\n              await visitedAnimation(\n                neighbour,\n                start,\n                target,\n                colors.light_gray\n              );\n            }\n\n            //   to check if is not wall\n            if (d < distances[neighbour]) {\n              distances[neighbour] = d;\n              // parents[neighbour] = val;\n              parents.set(neighbour, val);\n              // still getting costs update => dont stop!\n              stop = false;\n              // node with cost decreased\n              if (!test) {\n                await visitedAnimation(neighbour, start, target);\n              }\n            }\n          }\n        }\n      }\n    }\n    if (stop) break;\n  }\n  if (!stop && !test) {\n    alert(\"Negative Cycle was found!\");\n  }\n\n  console.log(`cycle: ${!stop}`);\n  if (parents.get(target) && stop) {\n    const path = getPath(parents, start, target);\n    if (!test) {\n      await pathAnimation(path);\n    }\n    return { cycle: !stop, path, parents };\n  }\n\n  return { cycle: !stop, path: null, parents };\n};\n\nexport default bellmanFord;\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Typography,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\n\nimport bellmanFord from \"../algorithms/bellmanFord\";\n\nimport styles from \"../styles/NavStyles\";\nimport NegButtonProps from \"./types/NegButtonTypes\";\n\nfunction NegButton(props: NegButtonProps) {\n  const {\n    grid,\n    disable,\n    btn,\n    handleClick,\n    setOpenDrawer,\n    clear,\n    newMaze,\n    setIsWeighted,\n  } = props;\n  const classes = styles();\n\n  const [openAlert, setOpenAlert] = useState(false);\n\n  const handleClickOpenAlert = () => {\n    setOpenAlert(true);\n  };\n\n  const handleCloseAlert = () => {\n    setOpenAlert(false);\n  };\n\n  const bfDialog = (\n    <Dialog\n      open={openAlert}\n      onClose={handleCloseAlert}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        How to run Bellman-Ford?\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          * Recommended Mode: Will Clear Grid, add to layers of walls and then\n          run Bellman-Ford. PS: Put both start and finsih node in the same\n          connected component is necessary for search min Path.\n        </DialogContentText>\n        <DialogContentText>\n          * Free-Style: Won't change any grid property and you can run as you\n          want.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={async () => {\n            setOpenDrawer(false);\n            handleCloseAlert();\n            clear();\n            await newMaze();\n            await newMaze();\n            setIsWeighted(true);\n            handleClick(bellmanFord(grid));\n          }}\n          color=\"primary\"\n        >\n          Recommended\n        </Button>\n        <Button\n          onClick={async () => {\n            setOpenDrawer(false);\n            handleCloseAlert();\n            handleClick(bellmanFord(grid));\n          }}\n          color=\"primary\"\n          autoFocus\n        >\n          Free-Style\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n\n  const negBtn = (\n    <div>\n      <Button\n        key=\"neg-btn\"\n        onClick={handleClickOpenAlert}\n        disabled={disable}\n        className={classes.button}\n      >\n        <Typography className={classes.text}>Bellman-Ford</Typography>\n      </Button>\n      {bfDialog}\n    </div>\n  );\n\n  const negBtnList = (\n    <List disablePadding>\n      <ListItem\n        key=\"neg-btn-list-item\"\n        onClick={handleClickOpenAlert}\n        divider\n        button\n        className={classes.button}\n        disabled={disable}\n      >\n        <ListItemText className={classes.listItemText}>\n          Bellman-Ford\n        </ListItemText>\n      </ListItem>\n      {bfDialog}\n    </List>\n  );\n\n  return btn ? negBtn : negBtnList;\n}\n\nexport default NegButton;\n","// linked list Node\nclass Node<T> {\n  next: null | Node<T>;\n  key: T;\n\n  constructor(key: T) {\n    this.next = null;\n    this.key = key;\n  }\n}\n\n// Queue implementation, FIFO, through linked list\nclass Queue<T> {\n  first: null | Node<T>;\n  last: null | Node<T>;\n  size: number;\n  constructor() {\n    this.first = null;\n    this.last = null;\n    this.size = 0;\n  }\n\n  // add to the end and return the size of this queue\n  enQueue(key: T) {\n    let node: Node<T> = new Node(key);\n    if (this.size === 0) {\n      this.first = node;\n      this.last = node;\n    } else {\n      this.last!.next = node;\n      this.last = node;\n    }\n    this.size++;\n    return this.size;\n  }\n\n  // remove the first node and return it\n  deQueue() {\n    if (this.size === 0) return null;\n    let removed = this.first;\n    if (this.size === 1) {\n      this.first = null;\n      this.last = null;\n    } else {\n      this.first = removed!.next;\n      removed!.next = null;\n    }\n    this.size--;\n    return removed;\n  }\n}\n\nexport default Queue;\n","import Grid from \"../models/Grid\";\nimport Node from \"../models/Node\";\nimport Queue from \"../structures/queue\";\nimport { valToIndx, getPath } from \"../helpers/gridHelper\";\nimport { pathAnimation, visitedAnimation } from \"../helpers/animations\";\n\nconst bfs = async (g: Grid, test = false) => {\n  const { grid, start, target, nCols } = g;\n  // maps node val to is viseted or not\n  const visited = new Map<number, boolean>();\n  // maps child val to parent val\n  const parents = new Map<number, number | null>();\n  // maps node val to distance from start node val\n  const dist = new Map<number, number>();\n  const q = new Queue<Node>();\n  const [startRow, startCol] = valToIndx(start, nCols);\n  // add start node to the queue\n  q.enQueue(grid[startRow][startCol]);\n  // start node is already visited\n  visited.set(start, true);\n  // distance to itself\n  dist.set(start, 0);\n  // doesnt have parent\n  parents.set(start, null);\n\n  // node that will be deQueue\n  let v: Node;\n  while (q.size !== 0) {\n    v = q.deQueue()!.key;\n    // check if v is the end vertex\n    if (v.val === target) {\n      //   we find the target\n      break;\n    }\n    // for every edge of v\n    for (const key in v.adjList) {\n      const w = v.adjList[key];\n      // check if w is not null\n      if (w !== null) {\n        const [row, col] = valToIndx(w, nCols);\n        //   wNode has all properties while w is wVeterx.val\n        const wNode = grid[row][col];\n        //   check w is visited or wall\n        if (visited.get(w) !== true && !wNode.isWall) {\n          //mark  w as visited\n          visited.set(w, true);\n          if (!test) await visitedAnimation(w, start, target);\n          //   enQueue vertex w, update dist and parents\n          q.enQueue(wNode);\n          parents.set(w, v.val);\n          dist.set(w, dist.get(v.val)! + 1);\n        }\n      }\n    }\n  }\n  if (visited.get(target)) {\n    const path = getPath(parents, start, target);\n    if (!test) await pathAnimation(path);\n    return { path, parents, visited };\n  }\n  return { path: null, parents, visited };\n};\n\nexport default bfs;\n","// linked list Node\nclass Node<T> {\n  next: null | Node<T>;\n  key: T;\n\n  constructor(key: T) {\n    this.next = null;\n    this.key = key;\n  }\n}\n\n// simple implementation using SLL, shift and unshift, here called as push and pop\n// First in Last Out\nclass Stack<T> {\n  first: null | Node<T>;\n  last: null | Node<T>;\n  size: number;\n  constructor() {\n    this.first = null;\n    this.last = null;\n    this.size = 0;\n  }\n\n  // add a node at the beginning and return the size of this stack\n  push(key: T) {\n    let node = new Node(key);\n    if (this.size === 0) {\n      this.first = node;\n      this.last = node;\n    } else {\n      node.next = this.first;\n      this.first = node;\n    }\n    this.size++;\n    return this.size;\n  }\n\n  // remove the first node and return it\n  pop() {\n    // empty stack\n    if (this.size === 0) return null;\n    let removed = this.first;\n    if (this.size === 1) {\n      this.first = null;\n      this.last = null;\n    } else {\n      this.first = removed!.next;\n      removed!.next = null;\n    }\n    this.size--;\n    return removed;\n  }\n}\n\nexport default Stack;\n","import Grid from \"../models/Grid\";\nimport Node from \"../models/Node\";\nimport Stack from \"../structures/stack\";\nimport { valToIndx, getPath } from \"../helpers/gridHelper\";\nimport { visitedAnimation, pathAnimation } from \"../helpers/animations\";\n\nconst dfs = async (g: Grid, test = false) => {\n  const { grid, nCols, start, target } = g;\n  // stack pop order\n  const result: number[] = [];\n  const visited = new Map<number, boolean>();\n  const parents = new Map<number, number | null>();\n  const stack = new Stack<Node>();\n  const [startRow, startCol] = valToIndx(start, nCols);\n  // add start node to the stack\n  stack.push(grid[startRow][startCol]);\n  // start node is already visited\n  visited.set(start, true);\n  parents.set(start, null);\n  let v;\n  while (stack.size !== 0) {\n    // take node v from the top of the stack\n    v = stack.pop()!.key!;\n    result.push(v.val);\n    if (v.val === target) {\n      //   we find the target\n      break;\n    }\n    // mark v as visited\n    visited.set(v.val, true);\n    if (!test) await visitedAnimation(v.val, start, target);\n    // for every edge of v\n    for (const key in v.adjList) {\n      const w = v.adjList[key];\n      if (w != null) {\n        const [row, col] = valToIndx(w, nCols);\n        //   wnode has all properties while w is wNode.val\n        const wNode = grid[row][col];\n        //   check w is visited, is not null or wall\n        if (!visited.get(w) && !wNode.isWall) {\n          //   push w node\n          stack.push(wNode);\n          parents.set(w, v.val);\n          if (w === target) {\n            //   we find the target\n            visited.set(w, true);\n            break;\n          }\n        }\n      }\n    }\n  }\n  if (visited.get(target)) {\n    const path = getPath(parents, start, target);\n    if (!test) await pathAnimation(path);\n    return { path, parents, visited };\n  }\n  return { path: null, parents, visited };\n};\n\nexport default dfs;\n","// TODO: Refactoring with context api, too much props\n// TODO: Create tests\nimport React, { Fragment, useState } from \"react\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport Grid from \"../models/Grid\";\nimport { clearAnimation } from \"../helpers/animations\";\nimport { getNewMazedGrid } from \"../helpers/gridHelper\";\n\nimport WeightedButton from \"./WeightedButton\";\nimport NegButton from \"./NegButton\";\nimport { createBtnOptList, createUnWBtnsList } from \"./navHelper\";\nimport { NavProps, FunctionHandled } from \"./types/NavTypes\";\nimport { WALL_EPS } from \"../helpers/consts\";\nimport styles from \"../styles/NavStyles\";\n\nfunction Nav(props: NavProps) {\n  const {\n    grid,\n    disable,\n    setGrid,\n    setDisable,\n    isWeighted,\n    setIsWeighted,\n    toggleIsweighted,\n    isNegative,\n    toggleIsNegative,\n    handleChangeStart,\n    handleChangeTarget,\n  } = props;\n\n  const { nCols, nRows, max, min, start, target } = grid;\n\n  const classes = styles();\n  const theme = useTheme();\n  const matchesSM = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const [openDrawer, setOpenDrawer] = useState(false);\n\n  const clear = () => {\n    clearAnimation(grid, start, target);\n    const n = new Grid(start, target, nRows, nCols, max, min);\n    setGrid(n);\n    setIsWeighted(false);\n  };\n\n  const newMaze = async () => {\n    const newGrid = await getNewMazedGrid(grid, WALL_EPS);\n    setGrid(newGrid);\n    // console.log(grid === newGrid)\n  };\n\n  const negativeWeight = () => {\n    clearAnimation(grid, start, target);\n    let n;\n    if (!isNegative) {\n      n = new Grid(start, target, nRows, nCols, max, min);\n    } else {\n      n = new Grid(start, target, nRows, nCols, max);\n    }\n    setGrid(n);\n    setIsWeighted(true);\n    toggleIsNegative();\n  };\n\n  const handleClick = async (alg: FunctionHandled) => {\n    setDisable(true);\n    await alg;\n    setDisable(false);\n  };\n\n  const btnOptList = createBtnOptList({\n    grid,\n    disable,\n    isNegative,\n    isWeighted,\n    clear,\n    newMaze,\n    handleClick,\n    handleChangeStart,\n    handleChangeTarget,\n    negativeWeight,\n    toggleIsweighted,\n  });\n\n  const unWBtnsList = createUnWBtnsList({\n    grid,\n    isWeighted,\n    disable,\n    handleClick,\n  });\n\n  const btnOpts = (\n    <Fragment>\n      {btnOptList.map((btn) =>\n        btn.name === \"Change Start\" || btn.name === \"Change Target\" ? null : (\n          <Button\n            key={`btnOpt-${btn.name}`}\n            className={classes.button}\n            onClick={btn.click}\n            disabled={btn.disabled}\n          >\n            {btn.name}\n          </Button>\n        )\n      )}\n    </Fragment>\n  );\n\n  const unWBtns = (\n    <Fragment>\n      {unWBtnsList.map((btn) => (\n        <Button\n          key={`unWBtn-${btn.name}`}\n          className={classes.button}\n          onClick={btn.click}\n          disabled={btn.disabled}\n        >\n          <Typography className={classes.text}>{btn.name}</Typography>\n        </Button>\n      ))}\n    </Fragment>\n  );\n\n  const btns = (\n    <Fragment>\n      <div className={classes.btnOpt}> {btnOpts}</div>\n      <div>{isWeighted ? null : unWBtns}</div>\n      <div>\n        {!isWeighted ? null : isNegative ? (\n          <NegButton\n            grid={grid}\n            disable={disable}\n            btn={true}\n            handleClick={handleClick}\n            setOpenDrawer={setOpenDrawer}\n            clear={clear}\n            newMaze={newMaze}\n            setIsWeighted={setIsWeighted}\n          />\n        ) : (\n          <WeightedButton\n            grid={grid}\n            disable={disable}\n            btn={true}\n            handleClick={handleClick}\n            setOpenDrawer={setOpenDrawer}\n          />\n        )}\n      </div>\n      <Button\n        className={classes.button}\n        onClick={() => {\n          window.open(\n            \"https://github.com/LyangHiga/pathfinding-visualizer#instructions\",\n            \"_blank\"\n          );\n        }}\n      >\n        Instructions\n      </Button>\n    </Fragment>\n  );\n\n  const drawer = (\n    <Fragment>\n      <SwipeableDrawer\n        open={openDrawer}\n        onClose={() => setOpenDrawer(false)}\n        onOpen={() => setOpenDrawer(true)}\n      >\n        <List disablePadding>\n          {btnOptList.map((btn) => (\n            <ListItem\n              key={`list-${btn.name}`}\n              onClick={() => {\n                setOpenDrawer(false);\n                btn.click();\n              }}\n              divider\n              button\n              className={classes.button}\n              disabled={disable}\n            >\n              <ListItemText className={classes.listItemText}>\n                {btn.name}\n              </ListItemText>\n            </ListItem>\n          ))}\n        </List>\n        {isWeighted ? (\n          !isNegative ? (\n            <WeightedButton\n              grid={grid}\n              disable={disable}\n              btn={false}\n              handleClick={handleClick}\n              setOpenDrawer={setOpenDrawer}\n            />\n          ) : (\n            <NegButton\n              grid={grid}\n              disable={disable}\n              btn={false}\n              handleClick={handleClick}\n              setOpenDrawer={setOpenDrawer}\n              clear={clear}\n              newMaze={newMaze}\n              setIsWeighted={setIsWeighted}\n            />\n          )\n        ) : (\n          <List disablePadding>\n            {unWBtnsList.map((btn) => (\n              <ListItem\n                key={`list-${btn.name}`}\n                onClick={() => {\n                  setOpenDrawer(false);\n                  btn.click();\n                }}\n                divider\n                button\n                className={classes.button}\n                disabled={disable}\n              >\n                <ListItemText className={classes.listItemText}>\n                  {btn.name}\n                </ListItemText>\n              </ListItem>\n            ))}\n          </List>\n        )}\n        <List>\n          <ListItem\n            divider\n            className={classes.button}\n            onClick={() => {\n              window.open(\n                \"https://github.com/LyangHiga/pathfinding-visualizer#instructions\",\n                \"_blank\"\n              );\n            }}\n          >\n            <ListItemText className={classes.listItemText}>\n              Instructions\n            </ListItemText>\n          </ListItem>\n        </List>\n      </SwipeableDrawer>\n      <IconButton\n        className={classes.drawerIconContainer}\n        onClick={() => setOpenDrawer(!openDrawer)}\n        disableRipple\n      >\n        <MenuIcon></MenuIcon>\n      </IconButton>\n    </Fragment>\n  );\n\n  return (\n    <AppBar position=\"static\" color=\"inherit\" className={classes.Navbar}>\n      <Toolbar>\n        <Typography className={classes.title} variant=\"h6\" color=\"inherit\">\n          Pathfinding Visualizer\n        </Typography>\n        {matchesSM ? drawer : btns}\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Nav;\n","import bfs from \"../algorithms/bfs\";\nimport dfs from \"../algorithms/dfs\";\nimport { clearPathAnimation } from \"../helpers/animations\";\nimport { BtnOptListParams, UnWBtnsListParams } from \"./types/NavHelperTypes\";\n\nexport const createBtnOptList = (params: BtnOptListParams) => {\n  const {\n    grid,\n    isNegative,\n    isWeighted,\n    disable,\n    handleClick,\n    clear,\n    newMaze,\n    handleChangeStart,\n    handleChangeTarget,\n    negativeWeight,\n    toggleIsweighted,\n  } = params;\n  return [\n    { name: \"Clear\", click: () => clear(), disabled: disable },\n    {\n      name: \"Clear Path\",\n      click: () => clearPathAnimation(grid),\n      disabled: disable,\n    },\n    { name: \"Maze\", click: () => handleClick(newMaze()), disabled: disable },\n    {\n      name: \"Change Start\",\n      click: () => handleChangeStart(),\n      disabled: disable,\n    },\n    {\n      name: \"Change Target\",\n      click: () => handleChangeTarget(),\n      disabled: disable,\n    },\n    {\n      name: isWeighted ? \"Unweighted Grid\" : \"Weighted Grid\",\n      click: () => toggleIsweighted(),\n      disabled: disable,\n    },\n    {\n      name: isNegative ? \"Positive\" : \"Negative\",\n      click: negativeWeight,\n      disabled: disable,\n    },\n  ];\n};\n\nexport const createUnWBtnsList = (params: UnWBtnsListParams) => {\n  const { grid, isWeighted, disable, handleClick } = params;\n\n  return [\n    {\n      name: \"BFS\",\n      click: () => {\n        handleClick(bfs(grid));\n      },\n      disabled: isWeighted ? true : disable,\n    },\n    {\n      name: \"DFS\",\n      click: () => handleClick(dfs(grid)),\n      disabled: isWeighted ? true : disable,\n    },\n  ];\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport { colors } from \"../helpers/consts\";\n\nconst styles = makeStyles((theme) => ({\n  node: {\n    height: \"25px\",\n    width: \"25px\",\n    outline: `1px solid ${colors.light_blue}`,\n    display: \"inline-block\",\n    fontSize: \"x-small\",\n    textAlign: \"center\",\n    color: colors.black,\n  },\n}));\n\nexport default styles;\n","import React from \"react\";\nimport styles from \"../styles/NodeStyles\";\n\ninterface NodeProps {\n  val: number;\n  row: number;\n  col: number;\n  isWeighted: boolean;\n  weight: number;\n  onMouseDown(row: number, col: number): void;\n  onMouseEnter(row: number, col: number): void;\n  onMouseUp(): void;\n}\n\nexport default function Node(props: NodeProps) {\n  const classes = styles();\n  return (\n    <div\n      id={`node-${props.val}`}\n      className={classes.node}\n      onMouseDown={() => props.onMouseDown(props.row, props.col)}\n      onMouseEnter={() => props.onMouseEnter(props.row, props.col)}\n      onMouseUp={() => props.onMouseUp()}\n    >\n      {props.isWeighted ? <span>{props.weight}</span> : \"\"}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Node from \"./Node\";\n\nimport { GridProps } from \"./types/GridTypes\";\n\nfunction Grid(props: GridProps) {\n  const {\n    grid,\n    isWeighted,\n    handleMouseDown,\n    handleMouseEnter,\n    handleMouseUp,\n  } = props;\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {grid.grid.map((row, rowIdx) => {\n        return (\n          <div key={rowIdx}>\n            {row.map((node) => {\n              const { row, col, val, weight } = node;\n              return (\n                <Node\n                  key={val}\n                  val={val}\n                  col={col}\n                  row={row}\n                  onMouseDown={handleMouseDown}\n                  onMouseEnter={handleMouseEnter}\n                  onMouseUp={handleMouseUp}\n                  weight={weight}\n                  isWeighted={isWeighted}\n                ></Node>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Grid;\n","import { useState } from \"react\";\n\nfunction useToggleState(\n  initialVal = false\n): [boolean, React.Dispatch<React.SetStateAction<boolean>>, () => void] {\n  // call useState, \"reserve piece of state\"\n  const [state, setState] = useState<boolean>(initialVal);\n  const toggle = () => {\n    setState(!state);\n  };\n  // return piece of state AND a function to toggle it\n  return [state, setState, toggle];\n}\nexport default useToggleState;\n","import { useState, useEffect } from \"react\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\n// Check:\n// https://stackoverflow.com/questions/36862334/get-viewport-window-height-in-reactjs\n","// TODO: Context api to global state is probably better than share state using props\n\nimport React, { useState, useEffect } from \"react\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\nimport GridModel from \"./models/Grid\";\n\nimport Nav from \"./components/Nav\";\nimport GridComponent from \"./components/Grid\";\n\nimport useToggleState from \"./hooks/useToggleState\";\nimport useWindowDimensions from \"./hooks/useWindowDim\";\n\nimport {\n  getNRowsandNCols,\n  getRandomNode,\n  changeStartNode,\n  changeTargetNode,\n  toggleIsWall,\n} from \"./helpers/gridHelper\";\n\nimport {\n  wallAnimation,\n  startNodeAnimation,\n  finishNodeAnimation,\n  clearNodeAnimation,\n  sleep,\n} from \"./helpers/animations\";\n\nimport { MAX, KEYS } from \"./helpers/consts\";\n\nfunction App() {\n  const { height, width } = useWindowDimensions();\n  const theme = useTheme();\n  const matchesSM = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  const [nRows, nCols] = getNRowsandNCols(matchesSM, height, width);\n  const [isWeighted, setIsWeighted, toggleIsweighted] = useToggleState();\n  const [isNegative, setIsNegative, toggleIsNegative] = useToggleState();\n  //   disable buttons in nav\n  const [disable, setDisable] = useState(false);\n  const [grid, setGrid] = useState<GridModel>();\n\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  const [createWall, setCreatWall, toggleCreateWall] = useToggleState(false);\n  const [changeStart, setChangeStart, toggleChangeStart] = useToggleState(\n    false\n  );\n  const [changeTarget, setChangeTarget, toggleChangeTarget] = useToggleState(\n    false\n  );\n\n  //   run only once, similar to Component Did mount\n  useEffect(() => {\n    const initialGrid = async () => {\n      const start = getRandomNode(nRows, nCols);\n      const target = getRandomNode(nRows, nCols);\n      const g = new GridModel(start, target, nRows, nCols, MAX);\n      setGrid(g);\n      await sleep(1);\n      startNodeAnimation(start);\n      finishNodeAnimation(target);\n    };\n    initialGrid();\n  }, []);\n\n  const handleChangeStart = () => {\n    setChangeTarget(false);\n    setCreatWall(false);\n    toggleChangeStart();\n  };\n\n  const handleChangeTarget = () => {\n    setChangeStart(false);\n    setCreatWall(false);\n    toggleChangeTarget();\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    switch (event.key) {\n      case KEYS.wall:\n        setChangeStart(false);\n        setChangeTarget(false);\n        return toggleCreateWall();\n      case KEYS.start:\n        return handleChangeStart();\n      case KEYS.target:\n        return handleChangeTarget();\n      default:\n        return;\n    }\n  };\n\n  const handleMouseDown = (row: number, col: number) => {\n    if (createWall) {\n      wallAnimation(grid!.grid[row][col]);\n      // ATTENTION changing nodes isnde gri.grid withou setState\n      toggleIsWall(grid!.grid[row][col]);\n      setMouseIsPressed(true);\n    } else if (changeStart) {\n      clearNodeAnimation(grid!.start);\n      // we will change 2 nodes inside from grid.grid out of setState\n      changeStartNode(grid!, grid!.grid[row][col]);\n      // changing start property of grid using setState\n      setGrid({ ...grid!, start: grid!.grid[row][col].val });\n      startNodeAnimation(grid!.grid[row][col].val);\n      setChangeStart(false);\n    } else if (changeTarget) {\n      clearNodeAnimation(grid!.target);\n      // we will change 2 nodes inside from grid.grid out of setState\n      changeTargetNode(grid!, grid!.grid[row][col]);\n      // changing target property of grid using setState\n      setGrid({ ...grid!, target: grid!.grid[row][col].val });\n      finishNodeAnimation(grid!.grid[row][col].val);\n      setChangeTarget(false);\n    }\n  };\n\n  const handleMouseEnter = (row: number, col: number) => {\n    if (!mouseIsPressed || !createWall) return;\n    wallAnimation(grid!.grid[row][col]);\n    // ATTENTION changing nodes isnde gri.grid withou setState\n    toggleIsWall(grid!.grid[row][col]);\n  };\n\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  };\n\n  return (\n    <div onKeyDown={handleKeyPress} tabIndex={0}>\n      {!grid ? null : (\n        <Nav\n          grid={grid!}\n          setGrid={setGrid}\n          disable={disable}\n          setDisable={setDisable}\n          isWeighted={isWeighted}\n          setIsWeighted={setIsWeighted}\n          toggleIsweighted={toggleIsweighted}\n          isNegative={isNegative}\n          toggleIsNegative={toggleIsNegative}\n          handleChangeStart={handleChangeStart}\n          handleChangeTarget={handleChangeTarget}\n        />\n      )}\n      <div className=\"grid\">\n        {!grid ? null : (\n          <GridComponent\n            grid={grid}\n            isWeighted={isWeighted}\n            handleMouseDown={handleMouseDown}\n            handleMouseEnter={handleMouseEnter}\n            handleMouseUp={handleMouseUp}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}