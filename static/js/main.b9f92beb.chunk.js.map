{"version":3,"sources":["animations.js","helpers/gridPropertiesHelper.js","helpers/initialGridHelper.js","structures/heap.js","algorithms/a.js","Nav.js","NavStyles.js","structures/queue.js","algorithms/bfs.js","structures/stack.js","algorithms/dfs.js","Node.js","hooks/useToggleState.js","hooks/useWindowDim.js","PathFindingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["sleep","m","Promise","r","setTimeout","pathAnimation","path","a","i","length","changingPropAnimation","visitedAnimation","val","start","end","clearAnimation","grid","startVal","finishVal","j","v","color","document","getElementById","style","backgroundColor","wallAnimation","isStart","isFinish","startNodeAnimation","finishNodeAnimation","clearNodeAnimation","clearPathAnimation","vertex","manhattan","b","c","d","Math","abs","valToIndx","nCols","row","floor","getNewGridWithNewProperty","col","prop","newGrid","slice","oldNode","oldPropToggled","toggleNodeProperty","node","newNode","getNewGridWithWallToggled","isWall","getNewGridWitNewStart","getNewGridWitNewFinish","getNewMazedGrid","eps","random","getPath","parents","dist","push","console","log","reverse","getWeightedPath","getRandomVertex","nRows","createNode","finish","w","adjList","createAdjList","getInitialGrid","wRange","currentRow","Node","key","this","Heap","values","idxs","undefined","k","idx","l","smallIdx","lessThan","contains","parentIdx","myParentIdx","bubbleUp","newVal","element","pop","heap","min","myChildrenIdx","lChild","rChild","bubbleDown","alpha","SCALING_FACTOR","distances","Array","fill","Infinity","inspectedNodes","nDeq","enqueue","f","s","dequeue","smallestVal","found","smallest","neighbour","nextVertex","newF","oldF","decreaseKey","getPathDistance","distance","sf","Nav","props","disable","setGrid","setDisable","isWeighted","setIsWeighted","toggleIsweighted","classes","styles","theme","useTheme","matchesSM","useMediaQuery","breakpoints","down","useState","openDrawer","setOpenDrawer","iOS","process","browser","test","navigator","userAgent","rowEnd","colEnd","rowStart","colStart","setAlpha","fName","setFName","changeAlpha","newMaze","handleClick","alg","hanldeSliderChange","btnOptList","name","click","n","clear","disabled","unWBtnsList","bfs","dfs","btnOpts","map","btn","className","button","onClick","unWBtns","wBtns","slider","defaultValue","max","onAfterChange","onChange","step","btns","btnOpt","window","open","drawer","disableBackdropTransition","disableDiscovery","onClose","onOpen","disablePadding","divider","drawerIconContainer","disableRipple","position","Navbar","title","variant","makeStyles","height","marginBottom","up","marginRight","paddingRight","borderRight","padding","margin","fontSize","textTransform","width","outline","border","boxShadow","marginLeft","marginTop","next","Queue","first","last","size","removed","visited","q","enQueue","deQueue","wVertex","Stack","result","stack","id","onMouseDown","onMouseEnter","onMouseUp","useToggleState","initialVal","state","setState","toggle","getWindowDimensions","innerWidth","innerHeight","PathFindingVisualizer","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","startVertex","setStarteVertex","finishVertex","setFinishVertex","mouseIsPressed","setMouseIsPressed","createWall","setCreatWall","toggleCreateWall","changeStart","setChangeStart","toggleChangeStart","changeFinish","setChangeFinish","toggleChangeFinish","initialGrid","handleMouseDown","handleMouseEnter","handleMouseUp","onKeyDown","event","tabIndex","rowIdx","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b9f92beb.chunk.js","sourcesContent":["export const sleep = (m) => new Promise((r) => setTimeout(r, m));\n\nexport const pathAnimation = async (path) => {\n  for (let i = 0; i < path.length; i++) {\n    await sleep(12);\n    changingPropAnimation(path[i], 'yellow');\n  }\n};\n\nexport const visitedAnimation = async (val, start, end) => {\n  if (val === end) return;\n  if (val === start) return;\n  await sleep(7);\n  changingPropAnimation(val, 'blue');\n};\n\nexport const clearAnimation = (grid, startVal, finishVal) => {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const v = grid[i][j];\n      changingPropAnimation(v.val, 'white');\n      if (v.val === startVal) {\n        changingPropAnimation(v.val, 'green');\n      }\n      if (v.val === finishVal) {\n        changingPropAnimation(v.val, 'red');\n      }\n    }\n  }\n};\n\nconst changingPropAnimation = (val, color) => {\n  const vertex = document.getElementById(`node-${val}`).style;\n  vertex.backgroundColor = `${color}`;\n};\n\nexport const wallAnimation = async (v) => {\n  if (v.isStart || v.isFinish) return;\n  await sleep(1);\n  changingPropAnimation(v.val, 'black');\n};\n\nexport const startNodeAnimation = (val) => {\n  changingPropAnimation(val, 'green');\n};\n\nexport const finishNodeAnimation = (val) => {\n  changingPropAnimation(val, 'red');\n};\n\nexport const clearNodeAnimation = (val) => {\n  changingPropAnimation(val, 'white');\n};\n\nexport const clearPathAnimation = (grid) => {\n  let vertex;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const v = grid[i][j];\n      vertex = document.getElementById(`node-${v.val}`).style;\n      if (\n        vertex.backgroundColor === 'blue' ||\n        vertex.backgroundColor === 'yellow'\n      ) {\n        clearNodeAnimation(v.val, 'white');\n      }\n    }\n  }\n};\n","import { wallAnimation } from \"../animations\";\n\n// Node Helpers\n\nexport const manhattan = (a, b, c, d) => {\n  return Math.abs(a - b) + Math.abs(c - d);\n};\n\n// returns {row, col} of a vertex val\nexport const valToIndx = (val, nCols) => {\n  const row = Math.floor(val / nCols);\n  const col = val - row * nCols;\n  return [row, col];\n};\n\n// Grid Helpers\n\nconst getNewGridWithNewProperty = (grid, row, col, prop, val, nCols) => {\n  const newGrid = grid.slice();\n  const [r, c] = valToIndx(val, nCols);\n  const oldNode = newGrid[r][c];\n  const oldPropToggled = toggleNodeProperty(oldNode, prop, false);\n  newGrid[r][c] = oldPropToggled;\n  const node = newGrid[row][col];\n  const newNode = toggleNodeProperty(node, prop, true);\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\n// returns a new grid after a mouse click (wall is created)\nexport const getNewGridWithWallToggled = (grid, row, col) => {\n  if (grid[row][col].isStart || grid[row][col].isFinish) return grid;\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = toggleNodeProperty(node, \"isWall\", !node.isWall);\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\n// returns a new grid after a mouse click (new start node)\nexport const getNewGridWitNewStart = (grid, row, col, startVal, nCols) => {\n  const newGrid = getNewGridWithNewProperty(\n    grid,\n    row,\n    col,\n    \"isStart\",\n    startVal,\n    nCols\n  );\n  return newGrid;\n};\n\n// returns a new grid after a mouse click (new finish point)\nexport const getNewGridWitNewFinish = (grid, row, col, finishVal, nCols) => {\n  const newGrid = getNewGridWithNewProperty(\n    grid,\n    row,\n    col,\n    \"isFinish\",\n    finishVal,\n    nCols\n  );\n  return newGrid;\n};\n\n// returns a new mazed grid\n// a node has eps prob to become a wall\nexport const getNewMazedGrid = async (grid, eps) => {\n  let newGrid = grid.slice();\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[row].length; col++) {\n      if (grid[row][col].isStart || grid[row][col].isFinish) {\n        break;\n      }\n      if (Math.random() <= eps) {\n        const node = newGrid[row][col];\n        const newNode = toggleNodeProperty(node, \"isWall\", true);\n        newGrid[row][col] = newNode;\n        await wallAnimation(newGrid[row][col]);\n      }\n    }\n  }\n  return newGrid;\n};\n\nconst toggleNodeProperty = (node, prop, val) => {\n  const newNode = {\n    ...node,\n    [prop]: val,\n  };\n  return newNode;\n};\n\n//   building path\nexport const getPath = (parents, end, dist) => {\n  let a = parents[end];\n  let path = [];\n  for (let i = 0; i < dist - 1; i++) {\n    path.push(a);\n    a = parents[a];\n  }\n  console.log(`Min Path: ${path.length + 1} squares`);\n  return path.reverse();\n};\n\n//   building path\nexport const getWeightedPath = (parents, start, end) => {\n  let a = parents[end];\n  let path = [];\n  while (a !== start) {\n    path.push(a);\n    a = parents[a];\n  }\n  return path.reverse();\n};\n","// import { NUM_COL, NUM_ROW } from '../consts';\n\n// returns a random vertex value\nexport const getRandomVertex = (nRows, nCols) => {\n  return Math.floor(Math.random() * nRows * nCols);\n};\n\nconst createNode = (col, row, start, finish, nRows, nCols, w = 1) => {\n  const val = row * nCols + col;\n  const adjList = createAdjList(val, col, row, nRows, nCols);\n\n  return {\n    col,\n    row,\n    isStart: val === start,\n    isFinish: val === finish,\n    isWall: false,\n    adjList: adjList,\n    val: val,\n    w,\n  };\n};\n\n//         A\n//    B   VAL  D\n//         C\n// returns all neighbours of VAL\nconst createAdjList = (val, col, row, nRows, nCols) => {\n  //   neighbours in a line above\n  // negative numbers arent a node\n  const a = row !== 0 ? val - nCols : null;\n  // neighbours in the same line\n  // check left border\n  const b = col !== 0 ? val - 1 : null;\n  // check right border\n  const d = col !== nCols - 1 ? val + 1 : null;\n  //  neighbours in a line bellow\n  // check overflow\n  const c = row !== nRows - 1 ? val + nCols : null;\n\n  return { a, b, c, d };\n};\n\n// returns the initial Grid\nexport const getInitialGrid = (start, finish, nRows, nCols, wRange = 0) => {\n  const grid = [];\n  for (let row = 0; row < nRows; row++) {\n    const currentRow = [];\n    for (let col = 0; col < nCols; col++) {\n      // get random weight for all edges of this node\n      const w = Math.floor(Math.random() * wRange + 1);\n      currentRow.push(createNode(col, row, start, finish, nRows, nCols, w));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n","class Node {\n  constructor(key, val) {\n    this.key = key;\n    this.val = val;\n  }\n}\n\nclass Heap {\n  constructor() {\n    this.values = [];\n    // dict: key to array idx => you say the key it returns the idx\n    this.idxs = {};\n  }\n\n  //   return true if this heap constains this key\n  //   otherwise returns false\n  contains(key) {\n    if (this.values[this.idxs[key]] === undefined) return false;\n    return true;\n  }\n\n  // return true if the element from index i is smaller than k idx element\n  lessThan(i, k) {\n    // out of bounds\n    if (i < 0 || k < 0) return false;\n    if (i > this.values.length - 1 || k > this.values.length - 1) return false;\n    let val = this.values[i].val;\n    let parent = this.values[k].val;\n    if (val < parent) return true;\n    return false;\n  }\n\n  //   return the parent's index of the ith node\n  myParentIdx(i) {\n    return Math.floor((i - 1) / 2);\n  }\n\n  //   return the children's index of the ith node\n  myChildrenIdx(i) {\n    // left 2 * i + 1 , right 2 * idx + 2\n    return [2 * i + 1, 2 * i + 2];\n  }\n\n  bubbleUp(i, j) {\n    //swap i and j\n    [this.values[i], this.values[j]] = [this.values[j], this.values[i]];\n\n    // swap idxs elements in dict key to idx\n    [this.idxs[this.values[i].key], this.idxs[this.values[j].key]] = [\n      this.idxs[this.values[j].key],\n      this.idxs[this.values[i].key],\n    ];\n  }\n\n  //   also returns the smmaller child idx\n  bubbleDown(idx, l, r) {\n    let smallIdx;\n    if (this.lessThan(l, r)) {\n      smallIdx = l;\n    } else if (this.lessThan(r, l)) {\n      smallIdx = r;\n    } else {\n      smallIdx = l;\n    }\n    // swap element from idx with greater\n    [this.values[idx], this.values[smallIdx]] = [\n      this.values[smallIdx],\n      this.values[idx],\n    ];\n\n    // swap idxs elements in dict key to idx\n    [this.idxs[this.values[idx].key], this.idxs[this.values[smallIdx].key]] = [\n      this.idxs[this.values[smallIdx].key],\n      this.idxs[this.values[idx].key],\n    ];\n\n    return smallIdx;\n  }\n\n  // insert an element in the next free spot and rearrange\n  //   return Heap\n  enqueue(key, val) {\n    // check whether this val belongs to this heap\n    // to avoid duplicate keys\n    if (this.contains(key)) return false;\n    let node = new Node(key, val);\n    this.values.push(node);\n    // last position to insert this new node\n    let idx = this.values.length - 1;\n    // add the idx of this key on the dict\n    this.idxs[key] = idx;\n    let parentIdx = this.myParentIdx(idx);\n    // bubble-up (while this new node is smaller than its parent)\n    while (this.lessThan(idx, parentIdx)) {\n      this.bubbleUp(idx, parentIdx);\n      //   recalculate node idx, parent idx position\n      idx = parentIdx;\n      parentIdx = this.myParentIdx(idx);\n    }\n    return this;\n  }\n\n  //   update val of this key and return this heap\n  //   if there is not any node with this key in this heap return false\n  decreaseKey(key, newVal) {\n    // check whether this key belongs to this heap\n    if (!this.contains(key)) return false;\n    //   get idx of this key\n    let idx = this.idxs[key];\n    //   update node with new val\n    this.values[idx].val = newVal;\n    let parentIdx = this.myParentIdx(idx);\n    if (parentIdx < 0) return this;\n    // bubble-up (while this new node is smaller than its parent)\n    while (this.lessThan(idx, parentIdx)) {\n      this.bubbleUp(idx, parentIdx);\n      //   recalculate node idx, parent idx position\n      idx = parentIdx;\n      parentIdx = this.myParentIdx(idx);\n    }\n    return this;\n  }\n\n  // Remove the root (min),\n  //   put the last element in the top and then rearrange\n  // return the root and the new arrangement\n  dequeue() {\n    // if is empty return undefined\n    if (this.values.length === 0) return undefined;\n    if (this.values.length === 1)\n      return { element: this.values.pop(), heap: this };\n    const min = this.values[0];\n    // replace the root with the last element\n    this.values[0] = this.values.pop();\n    // delete from dict\n    delete this.idxs[min.key];\n    // update idx of the 'new root' in the dict\n    this.idxs[this.values[0].key] = 0;\n    // index of this node we have to rearrange and the idx of its children\n    let idx = 0;\n    let [lChild, rChild] = this.myChildrenIdx(idx);\n    // bubble-down (while any child is smaller than the parent)\n    while (this.lessThan(lChild, idx) || this.lessThan(rChild, idx)) {\n      // update idx and its children\n      idx = this.bubbleDown(idx, lChild, rChild);\n      [lChild, rChild] = this.myChildrenIdx(idx);\n    }\n    return { element: min, heap: this };\n  }\n}\n\nexport default Heap;\n","import Heap from \"../structures/heap\";\nimport {\n  valToIndx,\n  getWeightedPath,\n  manhattan,\n} from \"../helpers/gridPropertiesHelper\";\nimport { pathAnimation, visitedAnimation } from \"../animations\";\n\nconst a = async (grid, start, end, nCols, wRange, alpha) => {\n  const heap = new Heap();\n  // expected value of a random (uniformily) weight :\n  //    sum of all possible values <sum of N first terms of AP> / max value\n  const SCALING_FACTOR = ((wRange + 1) * (wRange / 2)) / wRange;\n  // Initialize distances with Infinity and parents array with null\n  // Distance between any given node to the start node\n  const distances = Array(grid.length * nCols).fill(Infinity);\n  const parents = Array(grid.length * nCols).fill(null);\n  let smallestVal, found;\n  let inspectedNodes = 0;\n  let decrease = false;\n  let nDeq = 0;\n  distances[start.val] = 0;\n  //   add the start node to the heap\n  //   we will use f(n) = alpha * distance + ( 1 - alpha) * Manhattan distance\n  // as val to be minimized in the heap\n  //   f for the start node\n  heap.enqueue(start.val, f(0, start, end, alpha));\n  inspectedNodes++;\n\n  //   while there are elements in this heap\n  while (heap.values.length) {\n    //   get the min value from the heap\n    let s = heap.dequeue().element;\n    nDeq++;\n    // get its vertex\n    smallestVal = s.key;\n    // check if we find the target node\n    if (smallestVal === end.val) {\n      found = true;\n      break;\n    }\n    // convert smallestVal to a Vertex\n    const [r, c] = valToIndx(smallestVal, nCols);\n    const smallest = grid[r][c];\n    // for all neighbour of smallest\n    for (let k in smallest.adjList) {\n      // get the val of the neighbour\n      const neighbour = smallest.adjList[k];\n      // check if is not null => grid border\n      if (neighbour !== null) {\n        const [row, col] = valToIndx(neighbour, nCols);\n        //   neighbour as a vertex\n        let nextVertex = grid[row][col];\n        // calculate Dijkstra's  Greedy Criterium and manhattan distance\n        let d = distances[smallestVal] + smallest.w;\n        let newF = f(d, nextVertex, end, alpha, SCALING_FACTOR);\n        let oldF = f(\n          distances[nextVertex.val],\n          nextVertex,\n          end,\n          alpha,\n          SCALING_FACTOR\n        );\n        //   compare f(d,next,end) with f calculated with last distance storaged\n        if (newF < oldF && !nextVertex.isWall) {\n          //   updating distances and parents\n          distances[nextVertex.val] = d;\n          parents[nextVertex.val] = smallest.val;\n          decrease = heap.decreaseKey(nextVertex.val, newF);\n          if (!decrease) {\n            // enqueue with new priority\n            heap.enqueue(nextVertex.val, newF);\n          }\n          await visitedAnimation(nextVertex.val, start.val, end.val);\n          inspectedNodes++;\n        }\n      }\n    }\n  }\n  if (!found) return;\n  const path = getWeightedPath(parents, start.val, end.val);\n  //   min distance g() found  by A*\n  console.log(`A* with Alpha= ${alpha} Min Distance = ${distances[end.val]}`);\n  //   distance of this path (yellow)\n  console.log(\n    `A* with Alpha= ${alpha} Distance Calculated = ${getPathDistance(\n      path,\n      grid,\n      start,\n      nCols\n    )}`\n  );\n  console.log(`A* with Alpha= ${alpha} inspectedNodes = ${inspectedNodes}`);\n  console.log(`A* with Alpha= ${alpha} Dequeues = ${nDeq}`);\n  console.log(`scaling factor: ${SCALING_FACTOR}`);\n  await pathAnimation(path, start.val);\n};\n\n//   we will use f(n) = (alpha * distance + ( 1 - alpha) * Manhattan distance) * SCALING FACTOR\n//      we use a scaling factor because we compare nodes' weights with distances\n//      weight: [1, wRange] ; while Manhattan d. is calculated in '[nodes distance] units': 1 (for adj nodes)\n// as val to be minimized in the heap\nconst f = (distance, a, b, alpha, sf) => {\n  const g = distance;\n  const h = manhattan(a.row, b.row, a.col, b.col) * sf;\n  const w = g === Infinity && alpha === 0 ? Infinity : alpha * g;\n  const z = (1 - alpha) * h;\n  return w + z;\n};\n\nconst getPathDistance = (path, grid, start, nCols) => {\n  // start and finish nodes are not in the path (yelow animation)\n  let d = start.w;\n  for (let i = 0; i < path.length; i++) {\n    let [r, c] = valToIndx(path[i], nCols);\n    const node = grid[r][c];\n    d += node.w;\n  }\n  return d;\n};\nexport default a;\n","import React, { Fragment, useState } from \"react\";\nimport \"rc-slider/assets/index.css\";\nimport bfs from \"./algorithms/bfs\";\nimport dfs from \"./algorithms/dfs\";\nimport a from \"./algorithms/a\";\nimport { clearAnimation, clearPathAnimation } from \"./animations\";\nimport Slider from \"rc-slider\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport styles from \"./NavStyles\";\nimport { valToIndx, getNewMazedGrid } from \"./helpers/gridPropertiesHelper\";\nimport { getInitialGrid } from \"./helpers/initialGridHelper\";\n\nfunction Nav(props) {\n  const {\n    grid,\n    disable,\n    start,\n    end,\n    setGrid,\n    setDisable,\n    nRows,\n    nCols,\n    wRange,\n    isWeighted,\n    setIsWeighted,\n    toggleIsweighted,\n  } = props;\n\n  const classes = styles();\n  const theme = useTheme();\n  const matchesSM = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n  const [rowEnd, colEnd] = valToIndx(end, nCols);\n  const [rowStart, colStart] = valToIndx(start, nCols);\n  const [alpha, setAlpha] = useState(0.57);\n  const [fName, setFName] = useState(\"A*\");\n\n  const changeAlpha = (alpha) => setAlpha(alpha);\n\n  const clear = () => {\n    clearAnimation(grid, start, end);\n    const n = getInitialGrid(start, end, nRows, nCols, 50);\n    setGrid(n);\n    setIsWeighted(false);\n  };\n\n  const newMaze = async () => {\n    const newGrid = await getNewMazedGrid(grid, 0.33);\n    setGrid(newGrid);\n  };\n\n  const handleClick = async (alg) => {\n    setDisable(true);\n    await alg;\n    setDisable(false);\n  };\n\n  const hanldeSliderChange = () => {\n    if (alpha !== 0 && alpha !== 1) setFName(\"A*\");\n    else {\n      if (alpha === 0) setFName(\"Best Fisrt Search\");\n      if (alpha === 1) setFName(\"Dijkstra\");\n    }\n  };\n\n  const btnOptList = [\n    { name: \"Clear\", click: () => clear(), disabled: disable },\n    {\n      name: \"Clear Path\",\n      click: () => clearPathAnimation(grid),\n      disabled: disable,\n    },\n    { name: \"Maze\", click: () => handleClick(newMaze()), disabled: disable },\n    {\n      name: isWeighted ? \"Unweighted Grid\" : \"Weighted Grid\",\n      click: () => handleClick(toggleIsweighted()),\n      disabled: disable,\n    },\n    // { name: \"Negative\", click: undefined, disabled: disable },\n  ];\n\n  const unWBtnsList = [\n    {\n      name: \"BFS\",\n      click: () =>\n        handleClick(\n          bfs(grid, grid[rowStart][colStart], grid[rowEnd][colEnd], nCols)\n        ),\n      disabled: isWeighted ? true : disable,\n    },\n    {\n      name: \"DFS\",\n      click: () =>\n        handleClick(\n          dfs(grid, grid[rowStart][colStart], grid[rowEnd][colEnd], nCols)\n        ),\n      disabled: isWeighted ? true : disable,\n    },\n  ];\n\n  const btnOpts = (\n    <Fragment>\n      {btnOptList.map((btn) => (\n        <Button\n          key={`btnOpt-${btn.name}`}\n          className={classes.button}\n          onClick={btn.click}\n          disabled={btn.disabled}\n        >\n          {btn.name}\n        </Button>\n      ))}\n    </Fragment>\n  );\n\n  const unWBtns = (\n    <Fragment>\n      {unWBtnsList.map((btn) => (\n        <Button\n          key={`unWBtn-${btn.name}`}\n          className={classes.button}\n          onClick={btn.click}\n          disabled={btn.disabled}\n        >\n          {btn.name}\n        </Button>\n      ))}\n    </Fragment>\n  );\n\n  const wBtns = (\n    <Fragment>\n      <div className={classes.slider}>\n        <Slider\n          defaultValue={alpha}\n          min={0}\n          max={1}\n          onAfterChange={hanldeSliderChange}\n          onChange={changeAlpha}\n          step={0.01}\n          disabled={disable}\n        />\n      </div>\n      <span>Alpha: {alpha}</span>\n      <Button\n        className={classes.button}\n        onClick={() =>\n          handleClick(\n            a(\n              grid,\n              grid[rowStart][colStart],\n              grid[rowEnd][colEnd],\n              nCols,\n              wRange,\n              alpha\n            )\n          )\n        }\n        disabled={disable}\n      >\n        {fName}\n      </Button>\n    </Fragment>\n  );\n\n  const btns = (\n    <Fragment>\n      <div className={classes.btnOpt}> {btnOpts}</div>\n      <div>{isWeighted ? null : unWBtns}</div>\n      <div>{isWeighted ? wBtns : null}</div>\n      <Button\n        className={classes.button}\n        onClick={() => {\n          window.open(\n            \"https://github.com/LyangHiga/pathfinding-visualizer#instructions\",\n            \"_blank\"\n          );\n        }}\n      >\n        Instructions\n      </Button>\n    </Fragment>\n  );\n\n  const drawer = (\n    <Fragment>\n      <SwipeableDrawer\n        disableBackdropTransition={!iOS}\n        disableDiscovery={iOS}\n        open={openDrawer}\n        onClose={() => setOpenDrawer(false)}\n        onOpen={() => setOpenDrawer(true)}\n      >\n        <List disablePadding>\n          {btnOptList.map((btn) => (\n            <ListItem\n              key={`list-${btn.name}`}\n              onClick={() => {\n                setOpenDrawer(false);\n                btn.click();\n              }}\n              divider\n              button\n              className={classes.button}\n              disabled={disable}\n            >\n              <ListItemText>{btn.name}</ListItemText>\n            </ListItem>\n          ))}\n        </List>\n        {isWeighted ? (\n          <List disablePadding>\n            <ListItem divider>\n              <Slider\n                defaultValue={alpha}\n                min={0}\n                max={1}\n                onAfterChange={hanldeSliderChange}\n                onChange={changeAlpha}\n                step={0.01}\n                disabled={disable}\n                className={classes.slider}\n              />\n            </ListItem>\n            <ListItem divider className={classes.button}>\n              <ListItemText>Alpha: {alpha}</ListItemText>\n            </ListItem>\n            <ListItem\n              onClick={() => {\n                setOpenDrawer(false);\n                handleClick(\n                  a(\n                    grid,\n                    grid[rowStart][colStart],\n                    grid[rowEnd][colEnd],\n                    nCols,\n                    wRange,\n                    alpha\n                  )\n                );\n              }}\n              divider\n              button\n              className={classes.button}\n              disabled={disable}\n            >\n              <ListItemText>{fName}</ListItemText>\n            </ListItem>\n          </List>\n        ) : (\n          <List disablePadding>\n            {unWBtnsList.map((btn) => (\n              <ListItem\n                key={`list-${btn.name}`}\n                onClick={() => {\n                  setOpenDrawer(false);\n                  btn.click();\n                }}\n                divider\n                button\n                className={classes.button}\n                disabled={disable}\n              >\n                <ListItemText>{btn.name}</ListItemText>\n              </ListItem>\n            ))}\n          </List>\n        )}\n        <List>\n          <ListItem\n            divider\n            className={classes.button}\n            onClick={() => {\n              window.open(\n                \"https://github.com/LyangHiga/pathfinding-visualizer#instructions\",\n                \"_blank\"\n              );\n            }}\n          >\n            <ListItemText>Instructions</ListItemText>\n          </ListItem>\n        </List>\n      </SwipeableDrawer>\n      <IconButton\n        className={classes.drawerIconContainer}\n        onClick={() => setOpenDrawer(!openDrawer)}\n        disableRipple\n      >\n        <MenuIcon></MenuIcon>\n      </IconButton>\n    </Fragment>\n  );\n\n  return (\n    <AppBar position=\"static\" color=\"inherit\" className={classes.Navbar}>\n      <Toolbar>\n        <Typography className={classes.title} variant=\"h6\" color=\"inherit\">\n          Pathfinding Visualizer\n        </Typography>\n        {matchesSM ? drawer : btns}\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Nav;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst styles = makeStyles((theme) => ({\n  Navbar: {\n    height: \"8vh\",\n    marginBottom: \"10px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      height: \"10vh\",\n    },\n  },\n  title: {\n    [theme.breakpoints.up(\"md\")]: {\n      marginRight: \"1vw\",\n      paddingRight: \"2vw\",\n      borderRight: \"1px solid black\",\n      padding: \"0.5em\",\n    },\n  },\n  btnOpt: {\n    marginRight: \"1vw\",\n    paddingRight: \"1vw\",\n    borderRight: \"1px solid black\",\n    padding: \"0.5em\",\n  },\n  button: {\n    margin: \"0 6px\",\n    fontSize: \"1rem\",\n    textTransform: \"none\",\n  },\n  slider: {\n    width: \"12vw\",\n    margin: \"0 10px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n      margin: 0,\n    },\n    display: \"inline-block\",\n    \"& .rc-slider-track\": {\n      backgroundColor: \"transparent\",\n    },\n    \"& .rc-slider-rail\": {\n      height: \"8px\",\n    },\n    \"& .rc-slider-handle:active, .rc-slider-handle:hover, .rc-slider-handle:focus, .rc-slider-handle\": {\n      backgroundColor: \"black\",\n      outline: \"none\",\n      border: \"2px solid black\",\n      boxShadow: \"none\",\n      width: \"13px\",\n      height: \"13px\",\n      marginLeft: \"-7px\",\n      marginTop: \"-3px\",\n    },\n  },\n  drawerIconContainer: {\n    marginLeft: \"auto\",\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n}));\n\nexport default styles;\n","// linked list Node\nclass Node {\n  constructor(val) {\n    this.val = val;\n    this.next = null;\n  }\n}\n\n// Queue implementation, FIFO, through linked list\nclass Queue {\n  constructor() {\n    this.first = null;\n    this.last = null;\n    this.size = 0;\n  }\n\n  // add to the end and return the size of this queue\n  enQueue(val) {\n    let node = new Node(val);\n    if (this.size === 0) {\n      this.first = node;\n      this.last = node;\n    } else {\n      this.last.next = node;\n      this.last = node;\n    }\n    this.size++;\n    return this.size;\n  }\n\n  // remove the first node and return it\n  deQueue() {\n    if (this.size === 0) return null;\n    let removed = this.first;\n    if (this.size === 1) {\n      this.first = null;\n      this.last = null;\n    } else {\n      this.first = removed.next;\n      removed.next = null;\n    }\n    this.size--;\n    return removed;\n  }\n}\n\nexport default Queue;\n","import Queue from '../structures/queue';\nimport { valToIndx, getPath } from '../helpers/gridPropertiesHelper';\nimport { pathAnimation, visitedAnimation } from '../animations';\n\nconst bfs = async (grid, start, end, nCols) => {\n  let visited = {};\n  let parents = {};\n  let dist = {};\n  let q = new Queue();\n  // add start vertex to the queue\n  q.enQueue(start);\n  // start vertex is already visited\n  visited[start.val] = true;\n  dist[start.val] = 0;\n  parents[start.val] = null;\n  // vertex that will be deQueue\n  let v;\n  while (q.size !== 0) {\n    v = q.deQueue().val;\n    // check if v is the end vertex\n    if (v.val === end.val) {\n      //   we find the target\n      break;\n    }\n    // for every edge of v\n    for (const key in v.adjList) {\n      const w = v.adjList[key];\n      const [row, col] = valToIndx(w, nCols);\n      //   wVertex has all properties while w is wVeterx.val\n      const wVertex = grid[row][col];\n      //   check w is visited, is not null or wall\n      if (visited[w] !== true && w !== null && !wVertex.isWall) {\n        //mark  w as visited\n        visited[w] = true;\n        await visitedAnimation(w, start.val, end.val);\n        //   enQueue vertex w\n        q.enQueue(wVertex);\n        parents[w] = v.val;\n        dist[w] = dist[v.val] + 1;\n      }\n    }\n  }\n  const path = getPath(parents, end.val, dist[end.val]);\n  await pathAnimation(path, start.val);\n};\n\nexport default bfs;\n","// linked list Node\nclass Node {\n  constructor(val) {\n    this.val = val;\n    this.next = null;\n  }\n}\n\n// simple implementation using SLL, shift and unshift, here called as push and pop\n// First in Last Out\nclass Stack {\n  constructor() {\n    this.first = null;\n    this.last = null;\n    this.size = 0;\n  }\n\n  // add a node at the beginning and return the size of this stack\n  push(val) {\n    let node = new Node(val);\n    if (this.size === 0) {\n      this.first = node;\n      this.last = node;\n    } else {\n      node.next = this.first;\n      this.first = node;\n    }\n    this.size++;\n    return this.size;\n  }\n  // remove the first node and return it\n  pop() {\n    // empty stack\n    if (this.size === 0) return null;\n    let removed = this.first;\n    if (this.size === 1) {\n      this.first = null;\n      this.last = null;\n    } else {\n      this.first = removed.next;\n      removed.next = null;\n    }\n    this.size--;\n    return removed;\n  }\n}\n\nexport default Stack;\n","import Stack from '../structures/stack';\nimport { valToIndx } from '../helpers/gridPropertiesHelper';\nimport { visitedAnimation } from '../animations';\n\nconst dfs = async (grid, start, end, nCols) => {\n  //   const end = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n  //   stack pop order\n  let result = [];\n  let visited = {};\n  let stack = new Stack();\n  // add start vertex to the stack\n  stack.push(start);\n  // start vertex is already visited\n  visited[start.val] = true;\n  let v;\n  while (stack.size !== 0) {\n    // take vertex v from the top of the stack\n    v = stack.pop().val;\n    result.push(v.val);\n    if (v.val === end.val) {\n      //   we find the target\n      break;\n    }\n    // mark w as visited\n    visited[v.val] = true;\n    await visitedAnimation(v.val, start.val, end.val);\n    // for every edge of v\n    for (const key in v.adjList) {\n      const w = v.adjList[key];\n      const [row, col] = valToIndx(w, nCols);\n      //   wVertex has all properties while w is wVeterx.val\n      const wVertex = grid[row][col];\n      //   check w is visited, is not null or wall\n      if (visited[w] !== true && w !== null && !wVertex.isWall) {\n        //   push w vertex\n        stack.push(wVertex);\n        if (w === end.val) {\n          //   we find the target\n          break;\n        }\n      }\n    }\n  }\n};\n\nexport default dfs;\n","import React from 'react';\nimport './Node.css';\n\nexport default function Node(props) {\n  return (\n    <div\n      id={`node-${props.val}`}\n      className={'node'}\n      onMouseDown={() => props.onMouseDown(props.row, props.col)}\n      onMouseEnter={() => props.onMouseEnter(props.row, props.col)}\n      onMouseUp={() => props.onMouseUp()}\n    >\n      {props.isWeighted ? <span>{props.w}</span> : ''}\n    </div>\n  );\n}\n","import { useState } from \"react\";\nfunction useToggleState(initialVal = false) {\n  // call useState, \"reserve piece of state\"\n  const [state, setState] = useState(initialVal);\n  const toggle = () => {\n    setState(!state);\n  };\n  // return piece of state AND a function to toggle it\n  return [state, setState, toggle];\n}\nexport default useToggleState;\n","import { useState, useEffect } from \"react\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\n// Check:\n// https://stackoverflow.com/questions/36862334/get-viewport-window-height-in-reactjs\n","import React, { useState, useEffect } from \"react\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Node from \"./Node\";\nimport {\n  getNewGridWithWallToggled,\n  getNewGridWitNewStart,\n  getNewGridWitNewFinish,\n} from \"./helpers/gridPropertiesHelper\";\nimport { getRandomVertex, getInitialGrid } from \"./helpers/initialGridHelper\";\nimport Nav from \"./Nav\";\nimport \"./PathFindingVisualizer.css\";\nimport {\n  wallAnimation,\n  startNodeAnimation,\n  finishNodeAnimation,\n  clearNodeAnimation,\n  sleep,\n} from \"./animations\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport useWindowDimensions from \"./hooks/useWindowDim\";\n\nexport default function PathFindingVisualizer() {\n  // max edge weight\n  const wRange = 50;\n  const [grid, setGrid] = useState([]);\n  const { height, width } = useWindowDimensions();\n  const theme = useTheme();\n  const matchesSM = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  // 87% or 80%(SM display) of total height: discount nav height\n  const nRows = matchesSM\n    ? Math.floor((height * 0.8) / 27)\n    : Math.floor((height * 0.87) / 27);\n  const nCols = Math.floor(width / 27);\n  const [isWeighted, setIsWeighted, toggleIsweighted] = useToggleState(false);\n  //   disable buttons in nav\n  const [disable, setDisable] = useState(false);\n  const [startVertex, setStarteVertex] = useState(\n    getRandomVertex(nRows, nCols)\n  );\n  const [finishVertex, setFinishVertex] = useState(\n    getRandomVertex(nRows, nCols)\n  );\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  const [createWall, setCreatWall, toggleCreateWall] = useToggleState(false);\n  const [changeStart, setChangeStart, toggleChangeStart] = useToggleState(\n    false\n  );\n  const [changeFinish, setChangeFinish, toggleChangeFinish] = useToggleState(\n    false\n  );\n\n  //   run only once, similar to Component Did mount\n  useEffect(() => {\n    async function initialGrid() {\n      document.title = \"Pathfinding Visualizer\";\n      const n = getInitialGrid(startVertex, finishVertex, nRows, nCols, wRange);\n      setGrid(n);\n      await sleep(1);\n      startNodeAnimation(startVertex);\n      finishNodeAnimation(finishVertex);\n    }\n    initialGrid();\n  }, []);\n\n  const handleKeyPress = (event) => {\n    switch (event.key) {\n      case \"w\":\n        setChangeStart(false);\n        setChangeFinish(false);\n        return toggleCreateWall();\n      case \"s\":\n        setChangeFinish(false);\n        setCreatWall(false);\n        return toggleChangeStart();\n      case \"f\":\n        setChangeStart(false);\n        setCreatWall(false);\n        return toggleChangeFinish();\n      default:\n        return;\n    }\n  };\n\n  const handleMouseDown = (row, col) => {\n    if (createWall) {\n      wallAnimation(grid[row][col]);\n      const newGrid = getNewGridWithWallToggled(grid, row, col);\n      setGrid(newGrid);\n      setMouseIsPressed(true);\n    } else if (changeStart) {\n      clearNodeAnimation(startVertex);\n      const newGrid = getNewGridWitNewStart(grid, row, col, startVertex, nCols);\n      setStarteVertex(newGrid[row][col].val);\n      setGrid(newGrid);\n      startNodeAnimation(newGrid[row][col].val);\n      setChangeStart(false);\n    } else if (changeFinish) {\n      clearNodeAnimation(finishVertex);\n      const newGrid = getNewGridWitNewFinish(\n        grid,\n        row,\n        col,\n        finishVertex,\n        nCols\n      );\n      setFinishVertex(newGrid[row][col].val);\n      setGrid(newGrid);\n      finishNodeAnimation(newGrid[row][col].val);\n      setChangeFinish(false);\n    }\n  };\n\n  const handleMouseEnter = (row, col) => {\n    if (!mouseIsPressed || !createWall) return;\n    wallAnimation(grid[row][col]);\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n  };\n\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  };\n\n  return (\n    <div onKeyDown={handleKeyPress} tabIndex=\"0\">\n      <Nav\n        grid={grid}\n        setGrid={setGrid}\n        disable={disable}\n        setDisable={setDisable}\n        start={startVertex}\n        end={finishVertex}\n        nRows={nRows}\n        nCols={nCols}\n        wRange={wRange}\n        isWeighted={isWeighted}\n        setIsWeighted={setIsWeighted}\n        toggleIsweighted={toggleIsweighted}\n      />\n      <div className=\"grid\">\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx}>\n              {row.map((node) => {\n                const { row, col, val, adjList, w } = node;\n                return (\n                  <Node\n                    key={val}\n                    val={val}\n                    col={col}\n                    row={row}\n                    onMouseDown={handleMouseDown}\n                    onMouseEnter={handleMouseEnter}\n                    onMouseUp={handleMouseUp}\n                    adjList={adjList}\n                    w={w}\n                    isWeighted={isWeighted}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport PathFindingVisualizer from './PathFindingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}